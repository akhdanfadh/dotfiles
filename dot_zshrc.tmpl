{{- if lookPath "tmux" -}}
# Auto load TMUX
# https://unix.stackexchange.com/questions/43601/how-can-i-set-my-default-shell-to-start-up-tmux
# tradeoff: cannot use open in wezterm from finder/nautilus
if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
    printf "-- tmux friendly reminder î¶© --\n"
    # tmux attach -t main || tmux new -s main
fi

{{ end -}}

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

{{ if eq .chezmoi.os "linux" -}}
# User local bin (for chezmoi, etc.)
export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

{{ end -}}

{{ if stat (joinPath .chezmoi.homeDir ".nvm") -}}
# NVM path (Node Version Manager, miniconda for node.js)
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

{{ end -}}

# oh-my-zsh configuration
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="powerlevel10k/powerlevel10k"
zstyle ':omz:update' mode auto

plugins=(
    zsh-autocomplete
    conda-zsh-completion  # completion: DOPE
    zsh-autosuggestions
    fast-syntax-highlighting
    zsh-vi-mode
{{- if eq .os_id "darwin" }}
    brew  # alias
{{- end }}
    chezmoi  # completion: DOPE
{{- if lookPath "conda" }}
    conda  # alias
{{- end }}
    copypath  # function
{{- if eq .os_id "linux-ubuntu" }}
    debian  # function and alias
    ufw  # completion: DOPE
{{- end }}
{{- if lookPath "docker" }}
    docker  # completion and alias: DOPE
    docker-compose  # completion and alias: DOPE
{{- end }}
{{- if lookPath "eza" }}
    eza  # invoke eza rather ls, and alias
{{- end }}
{{- if lookPath "gh" }}
    gh  # completion gh cli: DOPE
{{- end }}
    git  # function and alias
    gitfast  # faster completion: DOPE
    # npm  # NOPE
    # nvm  # NOPE
    pip  # completion and alias: DOPE
    # python  # alias, but redundant
{{- if lookPath "rbw" }}
    rbw  # completion and function: DOPE
{{- end }}
{{- if or (or (lookPath "rustc") lookPath "rustup") lookPath "cargo" }}
    rust  # completion rustc, rustup, cargo: DOPE
{{- end }}
    ssh  # completion and function: DOPE
    # tmux  # NOPE, messed up tmux config and nesting
    aliases  # function
)

# zsh-vi-mode config
function zvm_config() {
    ZVM_INIT_MODE=sourcing
    ZVM_VI_INSERT_ESCAPE_BINDKEY='jj'
    ZVM_LINE_INIT_MODE=$ZVM_MODE_INSERT 
    ZVM_VI_SURROUND_BINDKEY='classic'  # classic = nvim-surround, s-prefix = mini.surround
}

# zsh-autosuggestions config
ZSH_AUTOSUGGEST_STRATEGY=(history completion)

{{ if lookPath "eza" -}}
# eza plugin config
zstyle ':omz:plugins:eza' 'dirs-first' yes
zstyle ':omz:plugins:eza' 'git-status' yes
zstyle ':omz:plugins:eza' 'icons' yes
{{ if and (eq .chezmoi.os "linux") (stat (joinPath .chezmoi.homeDir "bin/eza")) -}}
# eza completion
export FPATH="$HOME/bin/eza/completions/zsh:$FPATH"
{{- end }}

{{ end -}}

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
source $ZSH/oh-my-zsh.sh
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

# >>> KEYBINDINGS >>>
# Reset history key bindings to Zsh default and vim normal mode
() {
local -a prefix=( '\e'{\[,O} )
local -a up=( ${^prefix}A ) down=( ${^prefix}B )
local key=
for key in $up[@]; do
    bindkey "$key" up-line-or-history
done
for key in $down[@]; do
    bindkey "$key" down-line-or-history
done
}

# Vim key navigate history
bindkey -M vicmd 'j' down-line-or-history
bindkey -M vicmd 'k' up-line-or-history
bindkey -M viins "^j" down-line-or-history
bindkey -M viins "^k" up-line-or-history

# Extra vim custom mapping
bindkey -M vicmd 'H' beginning-of-line
bindkey -M vicmd 'L' end-of-line

# Cycle completions
bindkey '^I' menu-select
bindkey -M menuselect 'j' menu-complete
bindkey -M menuselect 'k' reverse-menu-complete
# bindkey -M menuselect '^I' accept-line

# Autosuggestion binding
bindkey "^_" autosuggest-accept  # Ctrl-/ accept all
bindkey "^L" forward-word  # accept next word

# <<< KEYBINDINGS <<<

# Autocomplete wait for a minimum amount of input
zstyle ':autocomplete:*' min-input 3

# Faster pasting multiline commands, especially with autosuggest and highlighting
# https://github.com/zsh-users/zsh-autosuggestions/issues/238
pasteinit() {
    OLD_SELF_INSERT=${${(s.:.)widgets[self-insert]}[2,3]}
    zle -N self-insert url-quote-magic # I wonder if you'd need `.url-quote-magic`?
}
pastefinish() {
    zle -N self-insert $OLD_SELF_INSERT
}
zstyle :bracketed-paste-magic paste-init pasteinit
zstyle :bracketed-paste-magic paste-finish pastefinish

# Language environment
export LANG=en_US.UTF-8
export LC_TIME=en_GB.UTF-8
export LC_PAPER=en_GB.UTF-8
export LC_MEASUREMENT=en_GB.UTF-8

{{ if and (eq .chezmoi.os "linux") (stat "/opt/nvim-linux64/") -}}
# Neovim configuration
export PATH="/opt/nvim-linux64/bin:$PATH"
export NVIM_APPNAME={{ .nvim_appname }}
export EDITOR="nvim"
alias v="nvim"
alias vr="nvim -R"

{{ else if and (eq .chezmoi.os "darwin") (lookPath "nvim") -}}
# Neovim configuration
export NVIM_APPNAME={{ .nvim_appname }}
export EDITOR="nvim"
alias v="nvim"
alias vr="nvim -R"

{{ end -}}

{{ if stat (joinPath .chezmoi.homeDir "miniconda3") -}}
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('$HOME/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "$HOME/miniconda3/etc/profile.d/conda.sh" ]; then
        . "$HOME/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="$HOME/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

{{ end -}}

{{ if stat (joinPath .chezmoi.homeDir ".rbenv") -}}
# Ruby environment manager, see https://github.com/rbenv/rbenv#how-rbenv-hooks-into-your-shell
RBENV_DIR="$HOME/.rbenv"
[ -d "$RBENV_DIR" ] && eval "$($RBENV_DIR/bin/rbenv init - --no-rehash zsh)"

{{ end -}}

{{ if lookPath "tmux" -}}
# TMUX aliases
alias tma="tmux attach -t main || tmux new -s main"
alias tmn="tmux new -A -s"  # start new or attach to named session
alias tml="tmux ls"  # new named session
alias tmk="tmux kill-session -t"  # terminate named running tmux session
alias tms="tmux source $HOME/.config/tmux/tmux.conf"  # terminate named running tmux session
alias tmka="tmux kill-server"  # terminall all tmux sessions

{{ end -}}

# Chezmoi aliases
alias cm="chezmoi"
alias cme="chezmoi edit -a"
alias cma="chezmoi apply"
alias cmav="chezmoi apply $HOME/.config/{{ .nvim_appname }}"

{{ if eq .is_wsl true -}}
# >>> WSL-only config >>>
{{ if lookPath "wslview" -}}
# WSL Browser config - make sure `wslu` is installed
export BROWSER=wslview
{{- end }}
# Wezterm WSL Config
alias wezedit="nvim $HOME/.config/wezterm/wezterm.lua"
alias wezpush="cp $HOME/.config/wezterm/wezterm.lua /mnt/c/Users/akhdan/.config/wezterm/wezterm.lua "
alias wezeditwin="vim /mnt/c/Users/akhdan/.config/wezterm/wezterm.lua"
alias wezpull="cp /mnt/c/Users/akhdan/.config/wezterm/wezterm.lua $HOME/.config/wezterm/wezterm.lua"
# <<< WSL-only config <<<

{{ end -}}

{{ if not .headless -}}
# External AI provider keys, configured with chezmoi
export ANTHROPIC_API_KEY={{ .anthropic_api_key }}
export OPENAI_API_KEY={{ .openai_api_key }}

{{ end -}}

# To customize prompt, run `p10k configure` or edit ~/.config/p10k.zsh or ~/.p10k.zsh.
[[ -f ~/.config/p10k.zsh ]] && source ~/.config/p10k.zsh || source ~/.p10k.zsh

{{- /* vim: set filetype=zsh: */ -}}
